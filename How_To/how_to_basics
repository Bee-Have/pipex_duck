get the infos from stdin :
	infile - cmd1 - cmd2 - outfile

use execve to launch shell cmd
	since it will start a new process, will have to use wait/waitpid in order to catch the return value
	i guess ?
execve closes the calling program
it would be wiser to use fork instead i think ?

so fork -> call cmd

after any error, call perror()

1- parse args
2- pipe
3- fork program
	1- execve cmd1
3.5- waitpid of child
4- use pipe[1] to store return of child execve
5- fork program
	1- execve cmd2
5.5- waitpid of child
5- use pipe[1] to store return of child execve
6- store pipe[1] in outfile

test tricky : < /dev/stdin cat | ls > /dev/stdout


feed execve :
	- path to cmd "./path"
	- (char **) which contains the args for the command sent

parse (char **)envp for "PATH=" :
	- for each line found with "PATH=" :
		- split with ':' = env[]:
			while (env[i] && ret_child == pas_bon)
			{
				id = fork();
				if (id == 0)
				{
					(char *)path = env[i] + cmd;
					execve(path, (const char *)args[], envp);
				}
				else
				{
					waitpid(id, ret_child, NULL);
					++i;
				}
			}
